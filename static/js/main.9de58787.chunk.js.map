{"version":3,"sources":["components/Counter/Counter.module.css","components/Reader/Reader.module.css","components/Publication/Publication.js","components/Counter/Counter.js","components/Controls/Controls.js","components/Reader/Reader.js","components/App.js","serviceWorker.js","index.js","components/Controls/Controls.module.css","components/Publication/Publication.module.css"],"names":["module","exports","Publication","item","className","styles","publication","publication_h2","title","publication_p","text","Counter","currentArticle","articleQuantity","counter","Controls","onHandleIncrement","onHandleDecrement","disablePrev","disableNext","controls","onClick","disable","button","type","Reader","state","articles","publicationsJson","handleIncrement","setState","prevState","handleDecrement","parsed","location","queryString","parse","search","getItemFromLocation","this","props","Number","prevProps","history","push","reader","length","Component","App","path","render","to","pathname","Boolean","window","hostname","match","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9de58787.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1jcv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reader\":\"Reader_reader__3iU87\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Publication.module.css';\n\nconst Publication = ({ item }) => {\n  return (\n    <article className={styles.publication}>\n      <h2 className={styles.publication_h2}>{item.title}</h2>\n      <p className={styles.publication_p}>{item.text}</p>\n    </article>\n  );\n};\n\nPublication.propTypes = {\n  item: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Publication;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Counter.module.css';\n\nconst Counter = ({ currentArticle, articleQuantity }) => {\n  return (\n    <div className={styles.counter}>\n      <p>\n        {currentArticle}/{articleQuantity}\n      </p>\n    </div>\n  );\n};\n\nexport default Counter;\n\nCounter.propTypes = {\n  currentArticle: PropTypes.number.isRequired,\n  articleQuantity: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nconst Controls = ({\n  onHandleIncrement,\n  onHandleDecrement,\n  disablePrev,\n  disableNext,\n}) => {\n  return (\n    <div className={styles.controls}>\n      <button\n        onClick={disablePrev === 'true' ? null : onHandleDecrement}\n        className={disablePrev === 'true' ? styles.disable : styles.button}\n        type=\"button\"\n      >\n        Назад\n      </button>\n      <button\n        onClick={disableNext === 'true' ? null : onHandleIncrement}\n        className={disableNext === 'true' ? styles.disable : styles.button}\n        type=\"button\"\n      >\n        Вперед\n      </button>\n    </div>\n  );\n};\n\nControls.propTypes = {\n  onHandleIncrement: PropTypes.func.isRequired,\n  onHandleDecrement: PropTypes.func.isRequired,\n  disablePrev: PropTypes.string.isRequired,\n  disableNext: PropTypes.string.isRequired,\n};\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport Publication from '../Publication/Publication';\nimport Counter from '../Counter/Counter';\nimport Controls from '../Controls/Controls';\nimport publicationsJson from '../publications.json';\nimport styles from './Reader.module.css';\n\nconst getItemFromLocation = location => queryString.parse(location.search).item;\n\nexport default class Reader extends Component {\n  state = {\n    currentArticle: 1,\n    articles: publicationsJson,\n  };\n\n  componentDidMount() {\n    // const { currentArticle } = this.state;\n    const { location } = this.props;\n    const parsed = getItemFromLocation(location);\n\n    this.setState({ currentArticle: Number(parsed) });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentArticle } = this.state;\n    const { history, location } = this.props;\n    if (prevState.currentArticle !== currentArticle) {\n      history.push({\n        ...location,\n        search: `item=${currentArticle}`,\n      });\n    }\n  }\n\n  handleIncrement = () => {\n    this.setState(prevState => ({\n      currentArticle: prevState.currentArticle + 1,\n    }));\n  };\n\n  handleDecrement = () => {\n    this.setState(prevState => ({\n      currentArticle: prevState.currentArticle - 1,\n    }));\n  };\n\n  render() {\n    const { currentArticle, articles } = this.state;\n\n    return (\n      <div className={styles.reader}>\n        <Publication item={articles[currentArticle - 1]} />\n        <Counter\n          currentArticle={currentArticle}\n          articleQuantity={articles.length}\n        />\n        <Controls\n          onHandleIncrement={this.handleIncrement}\n          onHandleDecrement={this.handleDecrement}\n          disablePrev={currentArticle === 1 ? 'true' : 'false'}\n          disableNext={currentArticle === articles.length ? 'true' : 'false'}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Reader from './Reader/Reader';\n\nconst App = () => {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/reader\" render={props => <Reader {...props} />} />\n        <Redirect\n          to={{\n            pathname: '/reader',\n            search: '?item=1',\n          }}\n        />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3w9Sj\",\"button\":\"Controls_button__wpiH2\",\"disable\":\"Controls_disable__2C8wv Controls_button__wpiH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"publication\":\"Publication_publication__3oc8I\",\"publication_h2\":\"Publication_publication_h2__2MqDw\",\"publication_p\":\"Publication_publication_p__23f_s\"};"],"sourceRoot":""}